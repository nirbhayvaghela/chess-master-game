// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  uuid         String   @unique @default(uuid())
  email        String   @unique
  username     String   @unique
  password     String
  streak       Int      @default(0)
  refreshToken String? // optional, for JWT refresh
  accessToken  String?
  createdAt    DateTime @default(now())
  inRoom      Boolean  @default(false)

  // Game Roles
  gamesAsPlayer1 GameRoom[] @relation("Player1")
  gamesAsPlayer2 GameRoom[] @relation("Player2")
  gamesAsWinner  GameRoom[] @relation("Winner")
  gamesAsLoser   GameRoom[] @relation("Loser")

  // Spectating
  Message    Message[]  @relation("UserMessages")
  spectatingRoomId    Int?      
  spectatingRoom      GameRoom?   @relation("Spectators", fields: [spectatingRoomId], references: [id])
}

model GameRoom {
  id       Int     @id @default(autoincrement())
  uuid     String  @unique @default(uuid())
  roomCode String  @unique
  roomName String?

  status    GameStatus
  history   Json
  time      Int?
  createdAt DateTime   @default(now())

  // Players
  player1Id Int? 
  player2Id Int?
  player1   User? @relation("Player1", fields: [player1Id], references: [id])
  player2   User? @relation("Player2", fields: [player2Id], references: [id])

  // Outcome
  winnerId Int? // null if draw
  loserId  Int?
  winner   User? @relation("Winner", fields: [winnerId], references: [id])
  loser    User? @relation("Loser", fields: [loserId], references: [id])

  // Spectators (Many-to-many)
  spectators User[] @relation("Spectators")

  // Messages
  messages Message[] @relation("RoomMessages")
}

model Message {
  id        Int      @id @default(autoincrement())
  room      GameRoom @relation("RoomMessages", fields: [roomId], references: [id])
  roomId    Int
  sender    User     @relation("UserMessages", fields: [senderId], references: [id])
  senderId  Int
  message   String
  createdAt DateTime @default(now())
}

enum GameStatus {
  waiting
  in_progress
  win
  lose
  draw
  stalemate
  playing
  completed
}

// enum RoomRole {
//   PLAYER
//   SPECTATOR
// }
